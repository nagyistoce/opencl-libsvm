#pragma OPENCL EXTENSION cl_khr_fp64: enabletypedef struct svm_struct{    int index;    double value;}svm_struct;typedef struct param_struct_dot{    double common_label;}param_struct_dot;typedef struct param_struct_poly{    double common_label;    double gamma;    double coef0;    int degree;}param_struct_poly;typedef struct param_struct_sigmoid{    double common_label;    double gamma;    double coef0;}param_struct_sigmoid;__kernel void sparseDot(__global const svm_struct* data, __global const int * feats, __global const double *vecin, __global double *res,  int l, param_struct_dot set_data){    size_t i =  get_global_id(0);    if(i<l) {    int first = feats[i];    int top = feats[i+l];    double cosa = 0;    for(int z = first; z < top; ++z) {       cosa += (data[z].value*vecin[data[z].index]);    }    res[i] = cosa;    }}__kernel void sparsePoly(__global const svm_struct* data, __global const int * feats, __global const double *vecin, __global double *res, int l, param_struct_poly set_data){    size_t i =  get_global_id(0);    if(i<l) {    double gamma = set_data.gamma; double coef0 = set_data.coef0; int degree = set_data.degree;     int first = feats[i];    int top = feats[i+l];    double cosa = 0;    for(int z = first; z < top; ++z) {       cosa += (data[z].value*vecin[data[z].index]);    }    res[i] = pown(gamma*cosa+coef0, degree);    }}__kernel void sparseSigmoid(__global const svm_struct* data, __global const int * feats, __global const double *vecin, __global double *res,  int l, param_struct_sigmoid set_data){    size_t i =  get_global_id(0);    if(i<l) {    double gamma = set_data.gamma; double coef0 = set_data.coef0;    int first = feats[i];    int top = feats[i+l];    double cosa = 0;    for(int z = first; z < top; ++z) {       cosa += (data[z].value*vecin[data[z].index]);    }    res[i] = tanh(gamma*cosa+coef0);    }}typedef struct param_struct_rbf {    double common_label;    double gamma;    double common_x_square;    }param_struct_rbf;__kernel void sparseRBF(__global const svm_struct* data, __global const int * feats, __global const double *vecin, __global double *res,int l,param_struct_rbf set_data,  __global double *x_square){    size_t i =  get_global_id(0);    if(i<l) {    double gamma = -set_data.gamma; double x_square_i = x_square[i]; double common_x_square =set_data.common_x_square; double common_label = set_data.common_label;    int first = feats[i];    int top = feats[i+l];    double cosa = 0;    for(int z = first; z < top; ++z) {       cosa += (data[z].value*vecin[data[z].index]);    }    res[i] = exp(gamma*(-2*cosa+x_square_i+common_x_square));    }}